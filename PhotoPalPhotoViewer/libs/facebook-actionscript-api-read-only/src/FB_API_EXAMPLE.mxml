<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2007 Jason Crist

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!--
The following is an example application to get you started using
the Facebook API in AS3.
  
The application can be run locally as a desktop application 
(validation required) or on the facebook website using the JavaScript API.  
Please post questions and comments to the Google Group
http://groups.google.com/group/facebook-actionscript-api
or send them to me (Jason Crist:jcrist@pbking.com)
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	creationComplete="init();">	

	<mx:TraceTarget
		id="myTraceTarget"
		filters="pbking.*"
		fieldSeparator=" | "
		includeCategory="true"
		includeLevel="true"
	/>

	<mx:Script>
		<![CDATA[
			import com.pbking.util.logging.PBLogger;
			import com.pbking.util.logging.PBLogEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import com.pbking.facebook.delegates.users.GetUserInfoDelegate;
			import com.pbking.facebook.data.users.FacebookUser;
			import com.pbking.facebook.data.users.UserFields;
			import com.pbking.facebook.delegates.friends.GetFriendsDelegate;
			import com.pbking.facebook.FacebookSessionType;
			import mx.logging.LogEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import com.pbking.facebook.data.photos.FacebookAlbum;
			import com.pbking.facebook.delegates.photos.GetAlbumsDelegate;
			import com.pbking.facebook.Facebook;
		
			[Bindable] private var fBook:Facebook;
			[Bindable] private var myFriends:ArrayCollection;
			
			private var logger:PBLogger;
			private var storedSession:SharedObject;
			
			/**
			 * Called when the application is ready
			 */
			private function init():void
			{
				//instantiate our Flash Friendly logger and listen for facebook logs
				logger = PBLogger.getLogger("pbking.facebook");
				logger.addEventListener(PBLogEvent.LOG, onLog);
				
				//create our facebook instance
				fBook = new Facebook();
				fBook.addEventListener(Event.COMPLETE, onFacebookReady);
				
				//determine if we're running locally.  if we are we'll run this
				//app as an unsecure desktop app.  Otherwise fire up a JSAuth session
				if(Application.application.url.slice(0, 5) == "file:")
				{
					var keyLoader:URLLoader = new URLLoader();
					keyLoader.addEventListener(Event.COMPLETE, onKeySecretLoaded);
					keyLoader.load(new URLRequest("api_key_secret.xml"));
				}
				else
				{
					var flashVars:Object = Application.application.parameters;
					//startWidgetSession has been depreciated
					//fBook.startWidgetSession(flashVars, config_api_key, config_secret);
					
					storedSession = getStoredSession(flashVars.api_key);
					
					//these flashVars are NOT the flashvars passed in when using an <fb:swf/> tag
					//they are pulled out of the JS api instance.  See /html/fb_as3_api_example.html for an
					//example of how to pull those values out and send them here.
					fBook.startJSBridgeSession(flashVars.api_key, flashVars.secret, flashVars.session_key, flashVars.expires, flashVars.user_id, flashVars.fb_js_api_name, flashVars.as_app_name); 
				}
			}
			
			private function getStoredSession(apiKey:String):SharedObject
			{
				return SharedObject.getLocal(apiKey+"_stored_session");
			}
			
			private function onKeySecretLoaded(e:Event):void
			{
				var keyLoader:URLLoader = e.target as URLLoader;
				keyLoader.removeEventListener(Event.COMPLETE, onKeySecretLoaded);
				
				var keySecret:XML = new XML(keyLoader.data);
				
				storedSession = getStoredSession(keySecret.api_key);
				
				fBook.startDesktopSession(keySecret.api_key, keySecret.secret, storedSession.data.infinite_session_key, storedSession.data.stored_secret);
			}
			
			/**
			 * Called with the facebook connection is ready.
			 * Makes the call to get a list of the user's albums
			 */
			private function onFacebookReady(event:Event):void
			{
				if(fBook.isConnected)
				{
					//save infinate session key if we can
					if(fBook.expires == 0)
					{
						storedSession.data.infinite_session_key = fBook.session_key;
						storedSession.data.stored_secret = fBook.secret;
						storedSession.flush();
					}
					//by passing in a callback function, we save the step of adding
					//a listener to the GetAlbums_delegate that is returned from the
					//following function
					fBook.friends.getFriends(onGetFriendsReply);
	
					// the following code would do the same thing
					/*
					var delegate:GetFriends_delegate = fBook.friends.getFriends();
					delegate.addEventListener(Event.COMPLETE, onGetFriendsReply);
					*/
				}
				else
				{
					Alert.show("Failed to connect to facebook: " + fBook.connectionErrorMessage);
				}
			}
			
			/**
			 * All calls to the Facebook server return a FacebookDelegate in the event.
			 * The results of the calls are public properties of that specific delegate.
			 * Here we are turning around and getting some info for all of our friends.
			 */
			private function onGetFriendsReply(event:Event):void
			{
				var delegate:GetFriendsDelegate = event.target as GetFriendsDelegate;
				fBook.users.getInfo(delegate.friends, [UserFields.name, UserFields.pic_big], onGetInfoReply);
			}
			
			private function onGetInfoReply(event:Event):void
			{
				var delegate:GetUserInfoDelegate = event.target as GetUserInfoDelegate;
				this.myFriends = new ArrayCollection(delegate.users);
			}

			/**
			 * util to show logging on the stage
			 */
			private function onLog(le:PBLogEvent):void
			{
				logText.text += le.message + "\n";
			}			
		]]>
	</mx:Script>
	
	<!--
		Desktop Validation button.
		Press this after the Facebook Login page has been launched
		and you have logged in.
	-->
		
	<mx:Button x="200" y="182" 
		label="Validate (desktop app)" 
		click="fBook.validateDesktopSession();"
		visible="{fBook.sessionType == FacebookSessionType.DESKTOP &amp;&amp; !fBook.isConnected}"/>

	<!--
		List of the logged in user's friends
	-->
	<mx:List id="friendList"
		x="200" y="10" 
		width="156" height="164"
		labelField="name" 
		dataProvider="{myFriends}"
		allowMultipleSelection="false"
		change="userPicture.source = FacebookUser(friendList.selectedItem).pic_big"/>
	
	<!--
		pic of the selected user
	-->
	<mx:Image id="userPicture" 
		left="364" top="10" right="10" height="198"/>
	
	<mx:Text x="10" y="10" text="This is a VERY primitive example of how to use the AS3 Facebook API.  You must replace the API_KEY and SECRET values in this file with your own to get it to operate correctly.  It loads a list of the albums of the logged-in user.  Running this app locally will put it in &quot;desktop&quot; mode.  After logging in, click the Validate button to continue.  In widget mode validation isn't necessary." width="180"/>
	
	<mx:TextArea id="logText" right="10" left="10" top="216" bottom="10"/>
	
	
</mx:Application>