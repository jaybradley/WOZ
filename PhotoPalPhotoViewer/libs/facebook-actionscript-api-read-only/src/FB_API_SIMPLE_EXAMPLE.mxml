<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2007 Jason Crist

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!--

**** READ THIS ****

The following is an example application to get you started using
the Facebook API in AS3.
  
The application can be on the facebook website using the JavaScript API.
See the fb_as3_api_example.html file for details on how to creat the bridge.

Please post questions and comments to the Google Group
http://groups.google.com/group/facebook-actionscript-api
or send them to me (Jason Crist:jcrist@pbking.com)

**** THANK YOU ****
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	backgroundGradientAlphas="[1.0, 1.0]" 
	backgroundGradientColors="[#FFFFFF, #FFFFFF]"
	creationComplete="init();" >
	
	<mx:Script>
		<![CDATA[
			import com.pbking.facebook.delegates.users.GetUserInfoDelegate;
			import com.pbking.util.logging.PBLogger;
			import com.pbking.util.logging.PBLogEvent;

			// IMPORTS //////////
			
			import com.pbking.facebook.Facebook;
			import com.pbking.facebook.delegates.friends.GetFriendsDelegate;
			import com.pbking.facebook.delegates.FacebookDelegate;
			import com.pbking.facebook.delegates.users.GetUserInfoDelegate;
			import com.pbking.facebook.data.users.UserFields;
			import com.pbking.facebook.data.users.FacebookUser;

			import flash.net.navigateToURL;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
		
			// VARIABLES //////////
			
			[Bindable] private var facebook:Facebook;
			[Bindable] private var user:FacebookUser;
			[Bindable] private var myFriends:ArrayCollection;
			[Bindable] private var currentFriend:FacebookUser;
		
			private var logger:PBLogger;
		
			// CONSTRUCTION //////////
			
			private function init():void
			{
				//instantiate our Flash Friendly logger and listen for facebook logs
				logger = PBLogger.getLogger("pbking.facebook");
				logger.addEventListener(PBLogEvent.LOG, onLog);

				//create our instance of the facebook object
				facebook = new Facebook();
				facebook.addEventListener(Event.COMPLETE, onFacebookSessionStarted);
				
				//these flashVars are NOT the flashvars passed in when using an <fb:swf/> tag
				//they are pulled out of the JS api instance.  See /html/fb_as3_api_example.html for an
				//example of how to pull those values out and send them here.
				var fv:Object = Application.application.parameters;
				facebook.startJSBridgeSession(fv.api_key, fv.secret, fv.session_key, fv.expires, fv.user_id, fv.fb_js_api_name, fv.as_app_name);
			}
			
			// UTIL FUNCTIONS //////////
			
			private function onLog(le:PBLogEvent):void
			{
				logText.text += le.message + "\n";
			}			

			private function onFacebookSessionStarted(e:Event):void
			{
				//first we have to test to make sure we connected ok
				if(facebook.isConnected)
				{
					//yay!  We're all connected!  Journey forth!
					onFacebookReady();
				}
				else
				{
					//we didn't connect like we should have.  Alert the user.
					Alert.show(facebook.connectionErrorMessage, "Error connecting");
				}
			}
			
			private function onFacebookReady():void
			{
				currentState="ready";
				
				//get some of the users info
				user = facebook.user;
				
				var d:GetUserInfoDelegate = facebook.users.getInfo([user], [UserFields.name]);
				d.addEventListener(Event.COMPLETE, onGotUserInfo);
			}
			
			private function onGotUserInfo(e:Event):void
			{
				var d:GetUserInfoDelegate = e.target as GetUserInfoDelegate;
				d.removeEventListener(Event.COMPLETE, onGotUserInfo);
				
				//check to see if the call was sucessful
				if(d.success)
				{
					//our user's info has been updated and will show in our bindings
					
					//now let's get our user's friends
					//here we'll demonstrate the "callback" so that you don't have to
					//add and remove an event listener to the delegate.  The "callback"
					//function returns the delegate to the function passed.
					facebook.friends.getFriends(onGotFriends);
				}
				else
				{
					handleErrorDelegate(d);
				}
			}
			
			private function handleErrorDelegate(d:FacebookDelegate):void
			{
				//something went wrong.  You should plan to handle this error better
				//but for now we're just going to throw up an alert and stop here.
				Alert.show(d.errorCode + ":" + d.errorMessage, "Facebook Error . . .");
			}
			
			private function onGotFriends(e:Event):void
			{
				var d:GetFriendsDelegate = e.target as GetFriendsDelegate;

				if(d.success)
				{
					//save my list of friends
					myFriends = new ArrayCollection(d.friends);
					
					//all we have of the friends right now is a uid
					//get some more info on them so we can at least show their name
					facebook.users.getInfo(myFriends.source, [UserFields.name], onGotFriendsName);
				}
				else
				{
					handleErrorDelegate(d);
				}
			}
			
			private function onGotFriendsName(e:Event):void
			{
				var d:GetUserInfoDelegate = e.target as GetUserInfoDelegate;
				
				if(d.success)
				{
					//we now have all of the user's friends, and their names
				}
				else
				{
					handleErrorDelegate(d);
				}
			}
			
			private function selectFriend(friend:FacebookUser):void
			{
				//this method is called when a user selects a friend from the list
				
				//save the friend.
				this.currentFriend = friend;
				
				//grab their info
				facebook.users.getInfo([friend], [UserFields.pic_big, UserFields.about_me], onGotFriendInfo);
			}
			
			private function onGotFriendInfo(e:Event):void
			{
				var d:GetUserInfoDelegate = e.target as GetUserInfoDelegate;
				if(d.success)
				{
					//our friends info will update and bind
				}
				else
				{
					handleErrorDelegate(d);
				}
			}
		]]>
	</mx:Script>
	
	<mx:TextArea id="logText" x="0" y="0" width="100%" height="100%"/>
	
	<mx:states>
	
		<!-- connection ready -->

		<mx:State name="ready">
			<mx:AddChild position="lastChild">
				<mx:HBox bottom="10" right="10" top="10" left="10">
				
					<mx:VBox x="10" bottom="10" top="10" height="100%">
					
						<mx:Text text="Welcome {user.name}.  Select a friend below to see their details."  
								 width="200"
								 fontSize="12"/>
								 
						<mx:List id="friendList"
								 width="200"
								 height="100%"
								 dataProvider="{myFriends}"
								 labelField="name"
								 allowMultipleSelection="false"
								 change="selectFriend(friendList.selectedItem as FacebookUser);"/>
						<mx:Text width="200" height="192">
							<mx:htmlText>
								<![CDATA[
This example was build with the Facebook ActionScript 3 API created by Jason Crist.  <br/>
The API is an MIT licensed library available on Google Code.  <br/>
For more information or to help with the API please visit the site.<br/>
<u><a href="http://code.google.com/p/facebook-actionscript-api">http://code.google.com/p/facebook-actionscript-api</a></u>
								]]>
							</mx:htmlText>
						</mx:Text>
					</mx:VBox>
					<mx:VRule height="100%"/>
					
					<mx:VBox width="100%" height="100%" right="10" bottom="10" id="vbox1">
					
						<mx:Label id="friendName"
							text="{currentFriend.name}"
							fontSize="14" 
							width="300"/>
							
						<mx:Image id="friendPic"
							source="{currentFriend.pic_big}"
							scaleContent="false"/>
							
						<mx:TextArea id="friendAbout"
							text="{currentFriend.about_me}"
							fontSize="14" 
							width="300" height="100%" borderStyle="none"/>
							
					</mx:VBox>
						
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{logText}" name="x"/>
			<mx:SetProperty target="{logText}" name="y"/>
			<mx:RemoveChild target="{logText}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{logText}"/>
		</mx:State>
	
	</mx:states>
	
</mx:Application>
